# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'my.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import typing
from PyQt5.QtCore import QObject, QSize
from PyQt5.QtGui import QBitmap

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QColor
from PyQt5.QtWidgets import  QLabel, QFileDialog , QMessageBox,  QMainWindow, QDesktopWidget, QTableWidget, QTableWidgetItem
from PyQt5.QtGui import QPixmap, QPainter
from PyQt5.QtGui import *
from PyQt5 import QtCore, QtGui, QtWidgets
import time
import numpy as np
import cv2
import argparse
import os
import torch
from ultralytics import YOLO


torch.device("cuda:0" if torch.cuda.is_available() else "cpu")


class Ui_Form(object):

    def __init__(self):
        super().__init__()
       
        self.resize(1620, 1020)
        self.result_pixmap = QPixmap()
        self.setWindowFlags(Qt.FramelessWindowHint) # hide title bar
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setWindowFlags(self.windowFlags() | QtCore.Qt.CustomizeWindowHint)
        self.setWindowFlags(self.windowFlags() & ~QtCore.Qt.WindowCloseButtonHint)
        self.setMouseTracking(True)
        self.offset = None

        self.centerWidget = QtWidgets.QWidget(self)
        self.centerWidget.setGeometry(QtCore.QRect(10, 10, 1600, 800))
        self.centerWidget.setStyleSheet("QWidget{\n"
        "    background: #FFFFFF;\n"
        "    border-radius: 10px;\n"
        "}")
        #添加阴影效果
        self.shadow = QtWidgets.QGraphicsDropShadowEffect()
        self.shadow.setBlurRadius(10)
        self.shadow.setColor(QtCore.Qt.gray)
        self.shadow.setOffset(0, 0)
        self.centerWidget.setGraphicsEffect(self.shadow)
        
        self.timer_video = QtCore.QTimer()


        self.closeBtn = QtWidgets.QPushButton(self.centerWidget)
        #放在右上角
        self.closeBtn.setGeometry(QtCore.QRect(int(self.width() - 60), 15, 20, 20))
        #圆形按钮

        self.closeBtn.setStyleSheet("QPushButton{\n"
        "    background:#CE0000;\n"
        "    color:white;\n"
        "    font-size:16px;border-radius: 10px;font-family: 微软雅黑;\n"
        "}\n"
        "QPushButton:hover{                    \n"
        "    background:#FF2D2D;\n"
        "}\n"
        "QPushButton:pressed{\n"
        "    border: 1px solid #3C3C3C!important;\n"
        "    background:#AE0000;\n"
        "}")
        self.closeBtn.clicked.connect(self.close)

        self.minBtn = QtWidgets.QPushButton(self.centerWidget)
        self.minBtn.setGeometry(QtCore.QRect(int(self.width() - 90), 15, 20, 20))
        self.minBtn.setStyleSheet("QPushButton{\n"
        "    background:#6C6C6C;\n"
        "    color:white;\n"
        "    font-size:16px;border-radius: 10px;font-family: 微软雅黑;\n"
        "}\n"
        "QPushButton:hover{                    \n"
        "    background:#9D9D9D;\n"
        "}\n"
        "QPushButton:pressed{\n"
        "    border: 1px solid #3C3C3C!important;\n"
        "}")
        self.minBtn.clicked.connect(self.showMinimized)

        self.title = QtWidgets.QLabel(self.centerWidget)
        self.title.setGeometry(QtCore.QRect(10, 10, 300, 30))
        self.title.setStyleSheet("QLabel{\n"
        "    font-size: 20px;\n"
        "    color: #000000;\n"
        "    font-weight: bold;\n"
        "    font-family: 微软雅黑;\n"
        "}")
        #居中
        self.title.setAlignment(Qt.AlignCenter)
        #在窗口中间
        print(self.width())
        self.title.move(int((self.width() - self.title.width()) / 2), 10)
        self.title.setText("GESTURE-RECOGNITION")


        self.centerWidth = 1600 - 40
        self.centerHeight = 800 - 70
        #添加垂直布局
        self.centerLayoutWidget = QtWidgets.QWidget(self.centerWidget)
        #居中
        self.centerLayoutWidget.setGeometry(QtCore.QRect(10, 45, self.centerWidth, self.centerHeight))
        self.centerLayoutWidget.move(int((self.width() - self.centerLayoutWidget.width()) / 2) - 10, 50)
        self.centerLayoutWidget.setStyleSheet("QWidget{\n"
        "    background: rgb(250, 250, 250);\n"
        "    border-radius: 10px;\n"
        "}")
        self.centerLayout = QtWidgets.QHBoxLayout(self.centerLayoutWidget)
        self.centerLayout.setContentsMargins(0, 0, 0, 0)
        self.centerLayout.setSpacing(0)


        btnHeight = 535
        btnWidth = 525
        btnSpace = 100
        
        self.videoBtn = QtWidgets.QPushButton(self.centerLayoutWidget)
        self.videoBtn.setGeometry(QtCore.QRect(int(self.centerWidth/2 - btnSpace - btnWidth),int(self.centerHeight/2 - btnHeight/2), btnWidth, btnHeight))
        self.videoBtn.setStyleSheet("QPushButton{\n"
        "   background-image: url(resource/video.png)0 -200px;\n"
        "   background-position: center center;\n"
        "   background-repeat: no-repeat;\n"
        "   background-origin: border-box;\n"
        "   background-color: #ffffff;\n"
        "   font-size:28px;border-radius: 0px;font-family: 微软雅黑;\n"
        "border-radius: 10px;"
        "text-align: center;"
        "font-weight: bold;"
        "padding-top: 200px;"
        "}\n"
        "QPushButton:hover{                    \n"
            "background-color:#F5F5F5;\n"
        "}\n"
        "QPushButton:pressed{\n"
            "background-color:#E5E5E5;\n"
        "}\n")
        self.videoBtn.setText("图片/视频识别")


        #摄像头识别
        self.CameraBtn = QtWidgets.QPushButton(self.centerLayoutWidget)
        self.CameraBtn.setGeometry(QtCore.QRect(int(self.centerWidth/2 + btnSpace), int(self.centerHeight/2 - btnHeight/2), btnWidth, btnHeight))
        self.CameraBtn.setStyleSheet("QPushButton{\n"
        "   background-image: url(resource/camera.png)0 -200px;\n"
        "   background-position: center center;\n"
        "   background-repeat: no-repeat;\n"
        "   background-origin: border-box;\n"
        "   background-color: #ffffff;\n"
        "   font-size:28px;border-radius: 0px;font-family: 微软雅黑;\n"
        "border-radius: 10px;"
        "font-weight: bold;"
        "text-align: center;"
        "padding-top: 200px;"
        "}\n"
        "QPushButton:hover{                    \n"
            "background-color:#F5F5F5;\n"
        "}\n"
        "QPushButton:pressed{\n"
            "background-color:#E5E5E5;\n"
        "}\n")
        self.CameraBtn.setText("摄像头识别")


        #点击后跳转到视频识别界面
        self.videoBtn.clicked.connect(self.videoBtnClick)
        #点击后跳转到摄像头识别界面
        self.CameraBtn.clicked.connect(self.cameraBtnClick)


        #返回按钮
        self.backBtn = QtWidgets.QPushButton(self)
        self.backBtn.raise_()
        self.backBtn.hide()
        self.backBtn.setGeometry(QtCore.QRect(20, 20, 50, 30))
        self.backBtn.setText("返回")
        self.backBtn.clicked.connect(self.backBtnClick)

        #视频识别界面
        self.videoWidget = QtWidgets.QWidget(self.centerWidget)
        self.videoWidget.raise_()
        self.videoWidget.setGeometry(QtCore.QRect(20, 65, self.centerWidth, self.centerHeight))
        #放在中间
        self.videoWidget.move(20, 50)
        self.videoWidget.hide()
        self.videoWidget.setStyleSheet("QWidget{\n"
        "    background: rgb(251, 251, 251);\n"
        "    border-radius: 10px;\n"
        "}")
    
        #摄像头识别界面
        self.cameraWidget = QtWidgets.QWidget(self.centerWidget)
        self.cameraWidget.raise_()
        self.cameraWidget.setGeometry(QtCore.QRect(20, 65, self.centerWidth, self.centerHeight))
        #放在中间
        self.cameraWidget.move(20, 50)
        self.cameraWidget.hide()
        self.cameraWidget.setStyleSheet("QWidget{\n"
        "    background: rgb(251, 251, 251);\n"
        "    border-radius: 10px;\n"
        "}")


        functionBtnStyle = "QPushButton{\n"\
        "    background:#FFFFFF;\n"\
        "border: 1px solid #efefef!important;\n"\
        "}\n"\
        "QPushButton:hover{                    \n"\
        "    background:#F5F5F5;\n"\
        "}\n"\
        "QPushButton:pressed{\n"\
        "    background:#E5E5E5;\n"\
        "}\n"\
        "QPushButton:disabled{\n"\
        "    background:#E5E5E5;\n"\
        "}"

        self.functionGroupBox = QtWidgets.QGroupBox(self.videoWidget)
        self.functionGroupBox.setGeometry(QtCore.QRect(int((self.videoWidget.width() - 555) / 2), 40, 555, 30))
        #透明
        self.functionGroupBox.setStyleSheet("QGroupBox{\n"
        "    background: transparent;\n"
        "    border-radius: 10px;\n"
        "padding: 0px;\n"
        "margin: 0px;\n"
        "}")

        #打开视频按钮
        self.openVideoBtn = QtWidgets.QPushButton(self.functionGroupBox)
        self.openVideoBtn.setGeometry(QtCore.QRect(0, 0, 150, 30))
        self.openVideoBtn.setText("打开图片/视频")
        self.openVideoBtn.clicked.connect(self.openVideoBtnClick)
        self.openVideoBtn.setStyleSheet(functionBtnStyle)
        #设置打开视频按钮图标
        self.openVideoBtn.setIcon(QIcon("./resource/video.png"))
        self.openVideoBtn.setIconSize(QtCore.QSize(20, 20))

        #暂停按钮
        self.pauseBtn = QtWidgets.QPushButton(self.functionGroupBox)
        self.pauseBtn.setGeometry(QtCore.QRect(150 + 15, 0, 120, 30))
        self.pauseBtn.setText("暂停")
        self.pauseBtn.clicked.connect(self.pauseBtnClick)
        self.pauseBtn.setStyleSheet(functionBtnStyle)
        #设置暂停按钮图标
        self.pauseBtn.setIcon(QIcon("./resource/pause.png"))
        self.pauseBtn.setIconSize(QtCore.QSize(20, 20))

        #继续按钮
        self.continueBtn = QtWidgets.QPushButton(self.functionGroupBox)
        self.continueBtn.setGeometry(QtCore.QRect((120+15)*2 + 30, 0, 120, 30))
        self.continueBtn.setText("继续")
        self.continueBtn.setDisabled(True)
        self.continueBtn.clicked.connect(self.continueBtnClick)
        self.continueBtn.setStyleSheet(functionBtnStyle)
        #设置继续按钮图标
        self.continueBtn.setIcon(QIcon("./resource/continue.png"))
        self.continueBtn.setIconSize(QtCore.QSize(20, 20))

        #结束按钮
        self.stopBtn = QtWidgets.QPushButton(self.functionGroupBox)
        self.stopBtn.setGeometry(QtCore.QRect((120+15)*3 + 30, 0, 120, 30))
        self.stopBtn.setText("结束")
        self.stopBtn.setStyleSheet(functionBtnStyle)
        self.stopBtn.clicked.connect(self.stopBtnClick)
        #设置结束按钮图标
        self.stopBtn.setIcon(QIcon("./resource/stop.png"))
        self.stopBtn.setIconSize(QtCore.QSize(20, 20))


        #视频播放窗口
        self.videoLabel = QtWidgets.QLabel(self.videoWidget)
        self.videoLabel.setGeometry(QtCore.QRect(30, 120, 960, 540))
        self.videoLabel.setStyleSheet("QLabel{\n"
        "    background: rgb(0, 0, 0);\n"
        "    border-radius: 10px;\n"
        "}")
        #居中放置
        self.videoLabel.move(int((self.videoWidget.width() - self.videoLabel.width()) / 2), 120)
        self.videoLabel.setAlignment(Qt.AlignCenter)
        self.videoLabel.setScaledContents(True)



        # #下面是检测结果输出框
        # self.modelSelectGroupBox = QtWidgets.QGroupBox(self.videoWidget)

        # self.resultOutputLabel = QtWidgets.QLabel(self.modelSelectGroupBox)
        # self.resultOutputLabel.setGeometry(QtCore.QRect(0, 90, 250, 15))
        # self.resultOutputLabel.setStyleSheet("QLabel{\n"
        # "    background: rgb(251, 251, 251);\n"
        # "    border-radius: 10px;\n"
        # "}")
        # self.resultOutputLabel.setText("识别结果：")
        # self.resultOutput = QtWidgets.QTextEdit(self.modelSelectGroupBox)
        # self.resultOutput.setGeometry(QtCore.QRect(0, 110, 250, 450))
        # self.resultOutput.setStyleSheet("QTextEdit{\n"
        # "    background: rgb(255, 255, 255);\n"
        # "    border-radius: 10px;\n"
        # "}")
        # #不可编辑
        # self.resultOutput.setReadOnly(True)


        self.cameraCapFlag = False
        self.cap = cv2.VideoCapture()
        self.num_stop = 1 # 暂停与播放辅助信号，note：通过奇偶来控制暂停与播放
        self.output_folder = 'output/'
        # self.vid_writer = None
        self.init_slots()
        self.init_model()


    def init_slots(self):
        self.timer_video.timeout.connect(self.show_video_frame)

    def init_model(self):
        self.model = YOLO('runs/detect/gesture_recognition/weights/best.pt')
        # result = model('Light-HaGRID/images/val/395.jpg', device=[0])
        # result[0].save('result.jpg')


    def mousePressEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            self.offset = event.pos()

    def mouseMoveEvent(self, event):
        if self.offset is not None:
            x = event.globalX()
            y = event.globalY()
            x_w = self.offset.x()
            y_w = self.offset.y()
            self.move(x - x_w, y - y_w)

    def mouseReleaseEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            self.offset = None

    def videoBtnClick(self):
        self.moduleChangeParent(self.videoWidget)
        self.videoWidget.show()
        self.backBtn.show()
        self.openVideoBtn.show()

    def cameraBtnClick(self):
        self.openVideoBtn.hide()
        #如果缓存文件夹不存在，则创建，存在则清空
        if not os.path.exists("./data/buff"):
            os.makedirs("./data/buff")
        else:
            for file in os.listdir("./data/buff"):
                os.remove("./data/buff/" + file)

        self.moduleChangeParent(self.cameraWidget)
        self.cameraWidget.show()
        self.backBtn.show()

        print("Open camera to detect")

        # 打开摄像头
        start = time.time()
        self.cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        #设置摄像头检测的fps
        self.cap.set(cv2.CAP_PROP_FPS, 24)
        fourcc = cv2.VideoWriter_fourcc('M', 'J', 'P', 'G')
        self.cap.set(cv2.CAP_PROP_FOURCC, fourcc)  # 还需要这句话
        end = time.time()
        print("Open camera time: ", end - start)
        
        # 判断摄像头是否处于打开状态
        bool_open = True
        bool_open = self.cap.isOpened()
        if not bool_open:
            QtWidgets.QMessageBox.warning(self, u"Warning", u"打开摄像头失败", buttons=QtWidgets.QMessageBox.Ok,
                                          defaultButton=QtWidgets.QMessageBox.Ok)
        else:
            # fps, w, h, save_path = self.set_video_name_and_path()
            # fps = 24 # 控制摄像头检测下的fps，Note：保存的视频，播放速度有点快，我只是粗暴的调整了FPS
            # self.vid_writer = cv2.VideoWriter(save_path, cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))
            self.timer_video.start(50)
        
    def backBtnClick(self):
        self.videoWidget.hide()
        self.cameraWidget.hide()
        self.backBtn.hide()
        self.overDetect()


    def set_video_name_and_path(self):
        # 获取当前系统时间，作为img和video的文件名
        now = time.strftime("%Y-%m-%d-%H-%M-%S", time.localtime(time.time()))
        # if vid_cap:  # video
        fps = self.cap.get(cv2.CAP_PROP_FPS)
        w = int(self.cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        h = int(self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        # 视频检测结果存储位置
        save_path = self.output_folder + 'video_output/' + now + '.mp4'
        return fps, w, h, save_path

    def openVideoBtnClick(self):
        if not os.path.exists("./data/buff"):
            os.makedirs("./data/buff")
        else:
            for file in os.listdir("./data/buff"):
                os.remove("./data/buff/" + file)
        video_name, _ = QtWidgets.QFileDialog.getOpenFileName(self, "打开图片/视频", "./", "*.jpg;;*.png;;*.jepg;;*.mp4;;*.avi;;All Files(*)")

        #如果是图片
        if video_name != "" and (video_name.endswith(".jpg") or video_name.endswith(".png") or video_name.endswith(".jepg")):
            with torch.no_grad():
                img_path = video_name
                result = self.model(img_path, device=[0] if torch.cuda.is_available() else "cpu")
                result[0].save('./data/buff/result.jpg')
                qImg = QImage()
                qImg.load('./data/buff/result.jpg')
                self.videoLabel.setPixmap(QtGui.QPixmap.fromImage(qImg))
                self.videoLabel.setScaledContents(True)  # 设置图像自适应界面大小
        else:
            flag = self.cap.open(video_name)
            
            if not flag:
                QtWidgets.QMessageBox.warning(self, u"Warning", u"打开图片/视频失败", buttons=QtWidgets.QMessageBox.Ok,defaultButton=QtWidgets.QMessageBox.Ok)
            else:
                self.timer_video.start(30) # 以30ms为间隔，启动或重启定时器

    def show_video_frame(self):
        flag, img = self.cap.read()
        if img is not None:
            with torch.no_grad():
                start = time.time()
                img_path = "./data/buff/" + "buff.jpg"
                cv2.imwrite(img_path, img)
                result = self.model(img_path, device=[0] if torch.cuda.is_available() else "cpu")
                result[0].save('./data/buff/result.jpg')
                qImg = QImage()
                qImg.load('./data/buff/result.jpg')
                self.videoLabel.setPixmap(QtGui.QPixmap.fromImage(qImg))
                self.videoLabel.setScaledContents(True)  # 设置图像自适应界面大小
                #删除缓存图片
                os.remove(img_path)

        else:
            QMessageBox.warning(self, u"Warning", u"检测完毕", buttons=QMessageBox.Ok)
            self.overDetect()

    def overDetect(self):
        self.cameraCapFlag = False
        self.timer_video.stop()
        self.cap.release() 
        self.videoLabel.clear()
        # self.resultOutput.clear()


    def stopBtnClick(self):
        self.overDetect()
        # self.backBtnClick()

                
    def pauseBtnClick(self):
        if self.timer_video.isActive():
            print("pause")
            self.timer_video.stop()
            self.timer_video.blockSignals(True)
            self.pauseBtn.setEnabled(False)
            self.continueBtn.setEnabled(True)
    
    def continueBtnClick(self):
        self.timer_video.blockSignals(False)
        print("continue")
        self.timer_video.start(30)
        self.pauseBtn.setEnabled(True)
        self.continueBtn.setEnabled(False)

    def moduleChangeParent(self, parent):
        self.videoLabel.setParent(parent)
        self.videoLabel.show()
        self.functionGroupBox.setParent(parent)
        self.functionGroupBox.show()


    
